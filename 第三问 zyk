import pandas as pd
import numpy as np
from sklearn.cluster import AgglomerativeClustering
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib
import re

# 设置中文字体
matplotlib.rcParams['font.sans-serif'] = ['SimHei', 'DejaVu Sans']
matplotlib.rcParams['axes.unicode_minus'] = False

# 读取数据
df_male = pd.read_csv('cleaned_data最终(1).csv')


# 转换孕周格式为数值
def convert_week_to_numeric(week_str):
    if pd.isna(week_str):
        return np.nan
    if isinstance(week_str, (int, float)):
        return week_str

    week_str = str(week_str).lower().replace('周', '').replace('w', '')
    match = re.search(r'(\d+)(?:\+(\d+))?', week_str)
    if match:
        weeks = int(match.group(1))
        days = int(match.group(2)) if match.group(2) else 0
        return weeks + days / 7
    return np.nan


df_male['检测孕周数值'] = df_male['检测孕周'].apply(convert_week_to_numeric)

# 关键修正：对每个孕妇找到最早达标时间
print("处理每个孕妇的最早达标时间...")

# 标记达标样本
df_male['达标'] = df_male['Y染色体浓度'] >= 0.04

# 对每个孕妇，找到最早达标的检测时间
earliest_pass_df = df_male[df_male['达标']].groupby('孕妇代码').agg({
    '检测孕周数值': 'min',
    'Y染色体浓度': 'first',
    '孕妇BMI': 'first',
    '年龄': 'first',
    '身高': 'first',
    '体重': 'first'
}).reset_index()

earliest_pass_df.rename(columns={'检测孕周数值': '最早达标孕周'}, inplace=True)

print(f"总孕妇数: {df_male['孕妇代码'].nunique()}")
print(f"有达标记录的孕妇数: {len(earliest_pass_df)}")
print(f"达标孕妇比例: {len(earliest_pass_df) / df_male['孕妇代码'].nunique() * 100:.1f}%")

# 合并回原始数据，为每个孕妇添加最早达标时间
df_male = df_male.merge(earliest_pass_df[['孕妇代码', '最早达标孕周']], on='孕妇代码', how='left')

# 对于没有达标记录的孕妇，设置最早达标孕周为NaN
df_male.loc[df_male['最早达标孕周'].isna(), '最早达标孕周'] = np.nan

# 1. 特征选择
feature_rename = {
    '年龄': '年龄',
    '身高': '身高',
    '体重': '体重',
    '孕妇BMI': 'BMI',
    'GC含量': '总GC含量',
    '13号染色体的GC含量': 'GC13',
    '18号染色体的GC含量': 'GC18',
    '21号染色体的GC含量': 'GC21'
}

features = list(feature_rename.keys())

# 使用每个孕妇的第一条记录进行分析（避免重复）
unique_patients = df_male.drop_duplicates('孕妇代码').copy()

# 检查并处理极端BMI值（临床合理性校验）
bmi_threshold = 40  # 临床定义的重度肥胖标准
extreme_bmi_count = sum(unique_patients['孕妇BMI'] > bmi_threshold)
print(
    f"\n临床异常值提示：BMI>40的重度肥胖孕妇共{extreme_bmi_count}人，占总样本{extreme_bmi_count / len(unique_patients) * 100:.1f}%")

# 计算相关系数
plot_data = unique_patients[features + ['Y染色体浓度']].copy()
plot_data.rename(columns=feature_rename, inplace=True)

corr = plot_data.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f',
            annot_kws={'size': 10}, cbar_kws={'shrink': 0.8})
plt.title("特征与Y染色体浓度的相关系数热力图", fontsize=14, pad=20)
plt.tight_layout()
plt.savefig('Q3-相关系数热力图.png', dpi=300, bbox_inches='tight')
plt.close()

# 随机森林特征重要性
X = unique_patients[features].fillna(0)
y = unique_patients['Y染色体浓度'].fillna(0)
model = RandomForestRegressor(random_state=42)
model.fit(X, y)

importance_df = pd.DataFrame({
    '特征': [feature_rename.get(f, f) for f in features],
    '重要性': model.feature_importances_
}).sort_values('重要性', ascending=False)

print("\n随机森林特征重要性:")
print(importance_df.to_string(index=False))
print()

# 解释特征重要性的临床意义
print("特征重要性临床解释:")
print("- 体重和BMI是影响Y染色体浓度的主要因素，提示肥胖可能降低检测灵敏度")
print("- 13、18、21号染色体GC含量与检测准确性相关，GC含量异常可能增加检测难度")
print()

# 3. 层次聚类BMI分组（基于唯一孕妇）
bmi_data = unique_patients[['孕妇BMI']].dropna().values

plt.figure(figsize=(12, 6))
Z = linkage(bmi_data, method='ward')
dendrogram(Z, truncate_mode='level', p=5)
plt.title('BMI层次聚类树状图')
plt.xlabel('样本索引')
plt.ylabel('距离')
plt.axhline(y=15, color='r', linestyle='--')
plt.savefig('Q3-BMI层次聚类树状图.png', dpi=300, bbox_inches='tight')
plt.close()

n_clusters = 4
hierarchical = AgglomerativeClustering(n_clusters=n_clusters, metric='euclidean', linkage='ward')
unique_patients['BMI分组'] = hierarchical.fit_predict(bmi_data)

# 按平均BMI排序分组，确保分组按BMI值递增
group_order = unique_patients.groupby('BMI分组')['孕妇BMI'].mean().sort_values().index
group_mapping = {old: new for new, old in enumerate(group_order)}
unique_patients['BMI分组'] = unique_patients['BMI分组'].map(group_mapping)

# 定义临床分组名称
clinical_group_names = {
    0: "正常/超重",
    1: "轻度肥胖",
    2: "中度肥胖",
    3: "重度肥胖"
}
unique_patients['BMI临床分组'] = unique_patients['BMI分组'].map(clinical_group_names)

# 将分组结果映射回原始数据
bmi_group_mapping = unique_patients[['孕妇代码', 'BMI分组', 'BMI临床分组']]
df_male = df_male.merge(bmi_group_mapping, on='孕妇代码', how='left')

# 输出每个分组的BMI区间
group_stats = unique_patients.groupby(['BMI分组', 'BMI临床分组'])['孕妇BMI'].agg(
    ['min', 'max', 'mean', 'count']).reset_index()
print("各BMI分组的统计信息:")
print(group_stats.to_string(index=False))
print()


# 4. 改进的风险函数（结合孕周和BMI，符合临床逻辑）
def risk(week, bmi):
    """
    基于临床实践的风险评估函数：
    - 考虑NIPT最佳检测窗口（12-22周）
    - 结合BMI对检测难度的影响
    - 风险等级：0=低风险，1=中风险，2=高风险，3=极高风险
    """
    if pd.isna(week):
        return 3  # 未达标→极高风险（需进一步检查）

    # 临床最佳检测窗口：12-22周
    if 12 <= week <= 22:
        if bmi < 30:
            return 0  # 正常BMI+最佳窗口→低风险
        elif 30 <= bmi < 38:
            return 1  # 高BMI+最佳窗口→中风险
        else:
            return 2  # 重度肥胖+最佳窗口→高风险
    # 可接受检测窗口：22-27周
    elif 22 < week <= 27:
        return 2  # 可接受窗口→高风险（无论BMI，需加快决策）
    # 非理想窗口：<12周（失败率高）或>27周（延误干预）
    else:
        return 3  # 极高风险


# 计算每个孕妇的风险值
unique_patients['风险值'] = unique_patients.apply(
    lambda row: risk(row['最早达标孕周'], row['孕妇BMI']), axis=1)

# 5. 最佳时点选择
groups = unique_patients.groupby(['BMI分组', 'BMI临床分组'])
best_weeks = {}

print("各BMI分组的最佳NIPT时点:")
print("-" * 100)
for (group_id, group_name), group_df in groups:
    if len(group_df) > 0:
        # 计算该组中达标孕妇的最早达标孕周分布
        passed_patients = group_df[~group_df['最早达标孕周'].isna()]

        if len(passed_patients) > 0:
            # 找到能够覆盖一定比例孕妇的孕周
            sorted_weeks = passed_patients['最早达标孕周'].sort_values()
            # 选择第75百分位的孕周作为推荐时点（覆盖75%的达标孕妇）
            recommended_week = sorted_weeks.quantile(0.75)

            # 计算该组的BMI均值用于风险评估
            avg_bmi = group_df['孕妇BMI'].mean()
            # 计算在该孕周检测的风险
            risk_at_week = risk(recommended_week, avg_bmi)

            best_weeks[group_id] = (recommended_week, risk_at_week, group_name, avg_bmi)

            bmi_min = group_df['孕妇BMI'].min()
            bmi_max = group_df['孕妇BMI'].max()

            print(f"分组 {group_id + 1} ({group_name}, BMI范围: {bmi_min:.1f}-{bmi_max:.1f}):")
            print(f"  推荐检测孕周: {recommended_week:.2f} 周")
            print(f"  在该孕周检测的风险等级: {risk_at_week}")
            print(
                f"  风险解释: {'低风险' if risk_at_week == 0 else '中风险' if risk_at_week == 1 else '高风险' if risk_at_week == 2 else '极高风险'}")

            # 统计信息
            total_patients = len(group_df)
            passed_patients_count = len(passed_patients)
            pass_rate = (passed_patients_count / total_patients) * 100
            fail_rate = 100 - pass_rate

            print(f"  孕妇总数: {total_patients}")
            print(f"  达标孕妇数: {passed_patients_count}")
            print(f"  达标率: {pass_rate:.1f}%")
            print(f"  预估失败率: {fail_rate:.1f}%")
            print(f"  平均最早达标孕周: {passed_patients['最早达标孕周'].mean():.2f}周")
            print("-" * 100)
        else:
            print(f"分组 {group_id + 1} ({group_name}): 没有孕妇达到4%的Y染色体浓度")
            print("-" * 100)

# 可视化结果 - 每个图单独保存

# 图1: 各分组最早达标孕周分布（增加四分位范围）
plt.figure(figsize=(10, 6))
for group_id in range(n_clusters):
    group_data = unique_patients[unique_patients['BMI分组'] == group_id]
    passed_data = group_data[~group_data['最早达标孕周'].isna()]
    group_name = group_data['BMI临床分组'].iloc[0]

    if len(passed_data) > 0:
        # 绘制散点
        plt.scatter([group_id + 1] * len(passed_data), passed_data['最早达标孕周'],
                    alpha=0.6, label=f'{group_name}')

        # 标注中位数和四分位范围
        median_week = passed_data['最早达标孕周'].median()
        q1 = passed_data['最早达标孕周'].quantile(0.25)
        q3 = passed_data['最早达标孕周'].quantile(0.75)

        plt.plot(group_id + 1, median_week, 'ro', markersize=8)
        # 绘制四分位线
        plt.plot([group_id + 0.9, group_id + 1.1], [q1, q1], 'r-', linewidth=2)
        plt.plot([group_id + 0.9, group_id + 1.1], [q3, q3], 'r-', linewidth=2)
        plt.plot([group_id + 1, group_id + 1], [q1, q3], 'r-', linewidth=2)

# 标注临床最佳检测窗口
plt.axhspan(12, 22, color='green', alpha=0.2, label='最佳检测窗口(12-22周)')
plt.axhspan(22, 27, color='yellow', alpha=0.2, label='可接受窗口(22-27周)')
plt.axhline(y=12, color='g', linestyle='--', alpha=0.7)
plt.axhline(y=22, color='y', linestyle='--', alpha=0.7)
plt.axhline(y=27, color='orange', linestyle='--', alpha=0.7)

plt.xlabel('BMI分组')
plt.ylabel('最早达标孕周')
plt.title('各分组孕妇的最早达标孕周分布（含四分位范围）')
plt.xticks(range(1, n_clusters + 1), [f'分组{i}' for i in range(1, n_clusters + 1)])
plt.legend()
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig('Q3-各分组最早达标孕周分布.png', dpi=300, bbox_inches='tight')
plt.close()

# 图2: 各分组达标率
plt.figure(figsize=(10, 6))
pass_rates = []
group_labels = []
for (group_id, group_name), group_df in groups:
    pass_rate = (len(group_df[~group_df['最早达标孕周'].isna()]) / len(group_df)) * 100
    pass_rates.append(pass_rate)
    group_labels.append(f'{group_name}\n(分组{group_id + 1})')

plt.bar(range(1, n_clusters + 1), pass_rates, color='skyblue')
plt.xlabel('BMI临床分组')
plt.ylabel('达标率 (%)')
plt.title('各分组的孕妇达标率')
plt.xticks(range(1, n_clusters + 1), group_labels, rotation=30)
for i, v in enumerate(pass_rates):
    plt.text(i + 1, v + 1, f'{v:.1f}%', ha='center')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig('Q3-各分组达标率.png', dpi=300, bbox_inches='tight')
plt.close()

# 图3: 风险分布（使用百分比）
plt.figure(figsize=(10, 6))
risk_counts = unique_patients.groupby(['BMI分组', 'BMI临床分组', '风险值']).size().unstack(fill_value=0)
# 转换为百分比
risk_percent = risk_counts.div(risk_counts.sum(axis=1), axis=0) * 100
risk_percent.plot(kind='bar', stacked=True, colormap='RdYlGn_r', figsize=(10, 6))
plt.xlabel('BMI分组 (临床分组)')
plt.ylabel('孕妇比例 (%)')
plt.title('各分组的风险分布（百分比）')
plt.xticks(rotation=30)
plt.legend(['低风险(0)', '中风险(1)', '高风险(2)', '极高风险(3)'])
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig('Q3-风险分布.png', dpi=300, bbox_inches='tight')
plt.close()

# 图4: BMI与最早达标孕周的关系
plt.figure(figsize=(10, 6))
passed_patients = unique_patients[~unique_patients['最早达标孕周'].isna()]
scatter = plt.scatter(passed_patients['孕妇BMI'], passed_patients['最早达标孕周'],
                      c=passed_patients['BMI分组'], cmap='viridis', alpha=0.6)
plt.colorbar(scatter, label='BMI分组')

# 标注临床最佳检测窗口
plt.axhspan(12, 22, color='green', alpha=0.2, label='最佳检测窗口(12-22周)')
plt.axhspan(22, 27, color='yellow', alpha=0.2, label='可接受窗口(22-27周)')

plt.xlabel('孕妇BMI')
plt.ylabel('最早达标孕周')
plt.title('BMI与最早达标孕周的关系')
plt.grid(True, alpha=0.3)
plt.legend()
plt.tight_layout()
plt.savefig('Q3-BMI与达标孕周关系.png', dpi=300, bbox_inches='tight')
plt.close()

print("\n 最终NIPT时点建议（基于孕妇级别分析）:")
print("=" * 100)
for group_id in range(n_clusters):
    if group_id in best_weeks:
        recommended_week, risk_level, group_name, avg_bmi = best_weeks[group_id]
        group_data = unique_patients[unique_patients['BMI分组'] == group_id]
        bmi_min = group_data['孕妇BMI'].min()
        bmi_max = group_data['孕妇BMI'].max()
        total_patients = len(group_data)
        passed_patients_count = len(group_data[~group_data['最早达标孕周'].isna()])
        fail_rate = 100 - (passed_patients_count / total_patients) * 100

        print(f"{group_name} (BMI: {bmi_min:.1f}-{bmi_max:.1f}):")
        print(f"  推荐检测时间: 孕{recommended_week:.1f}周")
        print(
            f"    预期风险等级: {risk_level} ({'低风险' if risk_level == 0 else '中风险' if risk_level == 1 else '高风险' if risk_level == 2 else '极高风险'})")
        print(f"  覆盖比例: 约75%的达标孕妇在此孕周前已达标")
        print(f"  预估失败率: {fail_rate:.1f}%，建议提前告知孕妇可能需要复测")

        # 针对不同风险等级的临床建议
        if risk_level == 0:
            print(f"  💡 临床建议: 常规检测流程即可，无需特殊准备")
        elif risk_level == 1:
            print(f"  💡 临床建议: 建议空腹检测以提高准确性，检测后48小时内关注结果")
        elif risk_level == 2:
            print(f"  💡 临床建议: 检测前避免高脂饮食，检测后24小时内复查，必要时考虑其他检测方式")
        else:
            print(f"  💡 临床建议: 强烈建议采用其他辅助检测手段，该BMI范围NIPT检测难度极高")

        print()

print("所有图表已保存为PNG文件，文件名以'Q3-'为前缀")
